//	ObjectTalk Scripting Language
//	Copyright (c) 1993-2025 Johan A. Goossens. All rights reserved.
//
//	This work is licensed under the terms of the MIT license.
//	For a copy, see <https://opensource.org/licenses/MIT>.

#version 450

layout(local_size_x=16, local_size_y=16, local_size_z=1) in;

layout(set=0, binding=0) uniform sampler2D inTexture;
layout(set=1, binding=0, rgba8) uniform writeonly image2D outTexture;

layout(std140, set=2, binding=0) uniform UBO {
	vec2 pixelSize;
	float normalStrength;
    bool includeHeight;
};

void main() {
	ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(outTexture);

	if (coord.x >= size.x || coord.y >= size.y) {
		return;
	}

	vec2 uv = (vec2(coord) + 0.5f) / vec2(size);

	// convert height map to normal map using Sobel filter
	float tl = texture(inTexture, uv + vec2(-pixelSize.x, -pixelSize.y)).r;
	float tc = texture(inTexture, uv + vec2(0.0, -pixelSize.y)).r;
	float tr = texture(inTexture, uv + vec2(pixelSize.x, -pixelSize.y)).r;
	float cl = texture(inTexture, uv + vec2(-pixelSize.x, 0.0)).r;
	float cc = texture(inTexture, uv).r;
	float cr = texture(inTexture, uv + vec2(pixelSize.x, 0.0)).r;
	float bl = texture(inTexture, uv + vec2(-pixelSize.x, pixelSize.y)).r;
	float bc = texture(inTexture, uv + vec2(0.0, pixelSize.y)).r;
	float br = texture(inTexture, uv + vec2(pixelSize.x, pixelSize.y)).r;

	vec3 normal = normalize(vec3(
		(tr + (2.0f * cr) + br) - (tl + (2.0f * cl) + bl),
		(bl + (2.0f * bc) + br) - (tl + (2.0f * tc) + tr),
		1.0 / normalStrength));

	imageStore(outTexture, coord, vec4(normal * 0.5f + 0.5f, includeHeight ? cc : 1.0f));
}
